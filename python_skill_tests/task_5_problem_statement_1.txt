Problem Statement 1:
Given an array of integers where each element represents the max number of steps that can be made forward from that element. Write a function to return the minimum number of jumps to reach the end of the array (starting from the first element). If an element is 0, then cannot move through that element.

For e.g.:
Input: arr[] = {1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9}
Output: 3 (1-> 3 -> 8 ->9)

First element is 1, so can only go to 3. Second element is 3, so can make at most 3 steps eg to 5 or 8 or 9.


code:

def minJumps(arr):
  if len(arr) <= 1 :
    return 0
  max_element_jump = arr[0]
  no_of_jumps =  arr[0]
  jump =0 
  for position in range(len(arr)):
    if position == len(arr)-1:
      return jump
    if position + arr[position] > max_element_jump:
      max_element_jump = position+arr[position]
    no_of_jumps -= 1 
    if no_of_jumps == 0 :
      jump += 1 
      no_of_jumps = max_element_jump - position
  return jump
arr = [1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9]
print(minJumps(arr))


approach:

defining the minJumps function which takes parameter as array:
	if the length of array is lessthan 1 or 1 :
		no jumps required so return 0
	assign variable max_element_jump = first element of array
	assign variable no_of_jumps = first elementof array
	assign jump to 0 
	iterating over for loop of length of array:
		if position is last element of array:
			return jump
		if sum of position , element in that position is greater than max_element_jump:
			update the value of max_element_jump = sum of position , element in that position
		decrementing the num of jumps since we crossed a element 
		if number of jumps == 0 :
			increment jump 
			update number of jumps = difference between max_element and postion
	return jump
intialize array = [1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9]
print the result of function minJumps which takes array as parameter
