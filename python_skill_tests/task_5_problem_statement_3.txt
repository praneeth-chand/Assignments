Problem Statement 3:
Write an efficient program to find the sum of contiguous subarray within a one-dimensional array of numbers which has the largest sum.

For e.g.:
Input: arr[] = {-2, -3, 4, -1, -2, 1, 5, -3}
Output: 7
4  + (-1) + (-2) + 1 + 5 = 7



code:

def MaximumSum(array):
  for i in range(len(array)-1):
    array[i+1] = max(array[i+1],array[i]+array[i+1])
  return max(array)
array= [-2, -3, 4, -1, -2, 1, 5, -3]
print(MaximumSum(array))


Approach:

defining the function MaximumSum which takes array as parameter:
	iterating over for loop across array:
		modifying the i+1 element with maximum element of array[i+1] or array[i] +array[i+1]
	return the maximum element in the array
 
intialising array
print the function MaximumSum which takes array as parameter

when i = 0

array[1] = max(array[1] , array[0] +array[1] )
#array[1] = max ( -3 , -2-3 = -5) --> -3

when i = 1

array[2] = max(array[2] , array[1] +array[2] )
#array[2] = max ( 4 , 4-3 = 1) --> 4

when i = 2

array[3] = max(array[3] , array[2] +array[3] )
#array[1] = max ( -1 , 4-1 = 3) --> 3

when i = 3

array[4] = max(array[4] , array[3] +array[4] )
#array[1] = max ( -2 , 3-2 = 1) --> 1

so the updated array will be like
 
array = [-2,-3,4,3,1,2,7,4]

so picking the maximum element gives us 7 through max function





